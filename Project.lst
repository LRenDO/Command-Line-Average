Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/02/20 11:37:04
&Project Template        (template.asm			     Page 1 - 1


				TITLE Project Template        (template.asm)

				; Author: Ren Demeis-Ortiz
				; Last Modified: 11.3.20
				; OSU Email: demeisol@oregonstate.edu
				; Course Number: CS271 Sec 400
				; Project Number: 6          
				; Due Date: 12.6.20
				; Description: Prompts user to enter 10 signed dword integers. 
				;		validates input and stores all values in an array. Calculates average.
				;		Finally it prints the integers, sum and average.
				;		Requires Irvine Library.

				;_____________________ADD DESCRIPTIONS Above and below change starting outputlist variable to 0


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt and receives string input from user.
				;
				; Preconditions: Pass string address for prompt and location for user input to be
				;		stored by reference. Uses ReadString and WriteString from Irvine Library and
				;		mDisplayString MACRO.
				;
				; Postconditions: User input is stored at second parameter. Registers are preserved 
				;		and restored (EDX, ECX, EAX). 
				;
				; Receives: 
				;		prompt (by reference) = address of prompt
				;		buffSize = size of buffer for user input
				;		input (by reference) =Address for storing user entered input 
				;		charEntered (by reference) = Address for storing total characters entered
				;
				; Returns: 
				;		input = User input
				;		charEntered = Total Characters Entered by User
				;		
				; ---------------------------------------------------------------------------------
				mGetString MACRO strAddress:REQ, buffSize:REQ, input:REQ, charEntered:REQ
					; Preserve Registers
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					PUSH	EDI

					; Prompt User 
					mDisplayString	strAddress

					; Get and Save User input
					MOV		EDX, input
					MOV		ECX, buffSize
					CALL	ReadString
					MOV		EDI, charEntered
					MOV		[EDI], EAX

					; Restore Registers
					POP		EDI
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints to console string at address passed as parameter
				;
				; Preconditions: Pass string reference by parameter. Uses WriteString   
				;		from Irvine Library.
				;
				; Postconditions: Uses EDX but preserves and restores it. Displays string.
				;
				; Receives:
				;		strAddr (by reference) = address of string to be printed
				;
				; Returns: None. Displays string.
				;		
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO strAddr:REQ
					; Preserve Register
					PUSH	EDX

					; Display String
					MOV		EDX, strAddr
					CALL	WriteString

					; Restore Register
					POP		EDX
				ENDM

				; Constants 
 = 0000000D			BUFFERSIZE = 13		;max char for a valid SDWORD is 11 + null + 1 for validation
 = 0000000A			ARRAYLEN = 10		;length of output array
 =-80000000			SDWMIN =	-2147483648
 = 7FFFFFFF			SDWMAX = 2147483647

 00000000			.data
				; Message and Title Variables
 00000000 2E 2E 2E 20 42	intro1			BYTE	"... By Ren Demeis-Ortiz",13,10,13,10,0
	   79 20 52 65 6E
	   20 44 65 6D 65
	   69 73 2D 4F 72
	   74 69 7A 0D 0A
	   0D 0A 00
 0000001C 46 75 6E 63 74	intro2			BYTE	"Functionality",13,10
	   69 6F 6E 61 6C
	   69 74 79 0D 0A
 0000002B  2E 2E 2E 0D 0A					BYTE	"...",13,10
 00000030  2E 2E 2E 0D 0A					BYTE	"...",13,10
 00000035  2E 2E 2E 0D 0A					BYTE	"...",13,10
 0000003A  2E 2E 2E 0D 0A					BYTE	"...",13,10
 0000003F  2E 2E 2E 0D 0A					BYTE	"...",13,10
 00000044  2E 2E 2E 0D 0A					BYTE	"...",13,10
 00000049  2E 2E 2E 0D 0A					BYTE	"...",13,10
 0000004E  0D 0A 00						BYTE	13,10,0
 00000051 57 6F 6F 70 73	error			BYTE	"Woops! That wasn't a valid input. Let's try again",13,10,0
	   21 20 54 68 61
	   74 20 77 61 73
	   6E 27 74 20 61
	   20 76 61 6C 69
	   64 20 69 6E 70
	   75 74 2E 20 4C
	   65 74 27 73 20
	   74 72 79 20 61
	   67 61 69 6E 0D
	   0A 00
 00000085 0D 0A 45 6E 74	prompt1			BYTE	13,10,"Enter a signed number between -2,147,483,648 " 
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   38 20
 000000B4  61 6E 64 20 2B					BYTE	"and +2,147,483,647: ",13,10,0
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 3A 20
	   0D 0A 00
 000000CB 0D 0A 59 6F 75	listTitle		BYTE	13,10,"You Entered:",13,10,0
	   20 45 6E 74 65
	   72 65 64 3A 0D
	   0A 00
 000000DC 53 75 6D 3A 20	sumTitle		BYTE	"Sum: ",0
	   00
 000000E2 41 76 65 72 61	avgTitle		BYTE	"Average (rounded down to nearest integer): ",0
	   67 65 20 28 72
	   6F 75 6E 64 65
	   64 20 64 6F 77
	   6E 20 74 6F 20
	   6E 65 61 72 65
	   73 74 20 69 6E
	   74 65 67 65 72
	   29 3A 20 00
 0000010E 2E 2E 2E 2C 20	farewell		BYTE	"..., have a great day!",13,10,13,10,0
	   68 61 76 65 20
	   61 20 67 72 65
	   61 74 20 64 61
	   79 21 0D 0A 0D
	   0A 00

				; Array and Calculation Variables
 00000129  0000000C [		tempStr			BYTE	12 DUP(0)
	    00
	   ]
 00000135  0000000C [		processedStr	BYTE	12 DUP(0)
	    00
	   ]
 00000141 0000000C		pStringLen		DWORD	LENGTHOF processedStr
 00000145  0000000D [		userInput		BYTE	BUFFERSIZE DUP (0)
	    00
	   ]
 00000152 0000000D		userInputSize	DWORD	SIZEOF userInput
 00000156  0000000A [		outputList		SDWORD	ARRAYLEN DUP (2)
	    00000002
	   ]
 0000017E 00000004		typeSize		DWORD	TYPE outputList
 00000182 00000000		inputLen		DWORD	?
 00000186 0000000A		elemPerLine		DWORD	10
 0000018A 00000000		sum				SDWORD	0
 0000018E 00000000		average			DWORD	0
 00000192 00000000		isValid			DWORD	0
 00000196 00000000		signedNum		SDWORD	?

 00000000			.code
 00000000			main PROC
				 
					; Introduce Program
 00000000  68 00000000 R		PUSH	OFFSET intro1
 00000005  68 0000001C R		PUSH	OFFSET intro2
 0000000A  E8 000000D4			CALL	introduction	


				;___	mGetString OFFSET prompt1, userInputSize, OFFSET userInput, inputLen

					mDisplayString OFFSET userInput
 0000000F  52		     1		PUSH	EDX
 00000010  BA 00000145 R     1		MOV		EDX, OFFSET userInput
 00000015  E8 00000000 E     1		CALL	WriteString
 0000001A  5A		     1		POP		EDX

					; Get 10 Valid Integers from User
 0000001B  6A 0A			PUSH	ARRAYLEN
 0000001D  68 00000156 R		PUSH	OFFSET OutputList
 00000022  68 00000051 R		PUSH	OFFSET error
 00000027  68 00000182 R		PUSH	OFFSET inputLen
 0000002C  68 80000000			PUSH	SDWMIN
 00000031  68 7FFFFFFF			PUSH	SDWMAX
 00000036  68 00000085 R		PUSH	OFFSET prompt1
 0000003B  FF 35 00000152 R		PUSH	userInputSize
 00000041  68 00000145 R		PUSH	OFFSET userInput
 00000046  68 00000196 R		PUSH	OFFSET signedNum
 0000004B  68 00000192 R		PUSH	OFFSET isValid
 00000050  E8 000000A9			CALL	getUserInputs

					; Display userInput Array
 00000055  FF 35 00000186 R		PUSH	elemPerLine
 0000005B  FF 35 0000017E R		PUSH	typeSize
 00000061  6A 0A			PUSH	ARRAYLEN
 00000063  68 000000CB R		PUSH	OFFSET listTitle
 00000068  68 00000156 R		PUSH	OFFSET outputList
 0000006D  E8 00000266			CALL	displayList

					; Calculate Average and Sum
 00000072  68 0000018E R		PUSH	OFFSET average
 00000077  68 0000018A R		PUSH	OFFSET sum
 0000007C  68 00000156 R		PUSH	OFFSET outputList
 00000081  6A 0A			PUSH	ARRAYLEN
 00000083  E8 000002A1			CALL	calcAverage

					; Display Sum 
 00000088  68 7FFFFFFF			PUSH	SDWMAX
 0000008D  68 80000000			PUSH	SDWMIN
 00000092  68 00000129 R		PUSH	OFFSET tempStr
 00000097  FF 35 00000141 R		PUSH	pStringLen
 0000009D  68 00000135 R		PUSH	OFFSET processedStr
 000000A2  FF 35 0000018A R		PUSH	sum
 000000A8  E8 0000018D			CALL	WriteVal

					; Display Average
 000000AD  68 7FFFFFFF			PUSH	SDWMAX
 000000B2  68 80000000			PUSH	SDWMIN
 000000B7  68 00000129 R		PUSH	OFFSET tempStr
 000000BC  FF 35 00000141 R		PUSH	pStringLen
 000000C2  68 00000135 R		PUSH	OFFSET processedStr
 000000C7  FF 35 0000018E R		PUSH	average
 000000CD  E8 00000168			CALL	WriteVal

					; Say farewell
 000000D2  68 0000010E R		PUSH	OFFSET farewell
 000000D7  E8 0000029D			CALL	displayFarewell



					Invoke ExitProcess,0	; exit to operating system
 000000DC  6A 00	   *	    push   +000000000h
 000000DE  E8 00000000 E   *	    call   ExitProcess
 000000E3			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Displays program name, author and functionality.
				;
				; Preconditions: Parameters pushed on to stack in following order - intro1, intro2
				;			 Requires printString MACRO.
				;		
				;
				; Postconditions: Uses EBP but preserves and restores it.  
				;
				; Receives:
				;		Stack Parameters: 
				;				intro1 (by reference)= program name and author
				;				intro2 (by reference) = program functionality
				;
				; Returns: None. Displays introduction.
				;		
				; ---------------------------------------------------------------------------------
 000000E3			introduction PROC
					; Set Base Pointer
 000000E3  55				PUSH	EBP
 000000E4  8B EC			MOV		EBP, ESP

					mDisplayString [EBP+12]						;address of intro1
 000000E6  52		     1		PUSH	EDX
 000000E7  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000EA  E8 00000000 E     1		CALL	WriteString
 000000EF  5A		     1		POP		EDX

					mDisplayString [EBP+8]						;address of intro2
 000000F0  52		     1		PUSH	EDX
 000000F1  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000F4  E8 00000000 E     1		CALL	WriteString
 000000F9  5A		     1		POP		EDX

 000000FA  5D				POP		EBP
 000000FB  C2 0008			RET		8

 000000FE			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: getUserInputs
				;
				; Gets prompts user to enter 10 signed numbers and stores them in an array as 
				; a string.  Reprompts user for invalid entries.
				;
				; Preconditions: Parameters pushed on to stack in order listed below under Receives.
				;			Requires mGetString MACRO and ReadVal PROC.
				;		
				;
				; Postconditions: Uses registers but restores them (). 
				;
				; Receives:
				;		Stack Parameters: 
				;			ARRAYLEN = number of outputList elements
				;			outputList (by reference) = address to store signed numbers
				;			error (by reference) = address of error message
				;			inputLen (by reference) = address for number of characters inputted
				;			SDWMIN = lowest signed 32 bit integer value
				;			SDWMAX = greatest signed 32 bit integer value
				;			prompt1	(by reference) = address of prompt for user to enter number
				;			userInputSize = buffer size for input
				;			userInput (by reference) = address for string user inputs
				;			signedNum (by reference) = address to store outputted SDWORD
				;			isValid (by reference) = address to store if number is written or not
				;
				; Returns: 
				;		outputList (by reference) = address to store outputed SDWORD
				;		
				; ---------------------------------------------------------------------------------
 000000FE			getUserInputs PROC
					; Preserve Registers
 000000FE  55				PUSH	EBP
 000000FF  8B EC			MOV		EBP, ESP
 00000101  50				PUSH	EAX
 00000102  53				PUSH	EBX
 00000103  51				PUSH	ECX
 00000104  52				PUSH	EDX
 00000105  57				PUSH	EDI
 00000106  56				PUSH	ESI

					; Set Registers
 00000107  8B 4D 30			MOV		ECX, [EBP+48]				;ARRAYLEN
 0000010A  8B 7D 2C			MOV		EDI, [EBP+44]				;OutputList

 0000010D			_NextElement:
					; Get User Input
 0000010D  FF 75 28			PUSH	[EBP+40]					;address of error
 00000110  FF 75 24			PUSH	[EBP+36]					;address of inputLen
 00000113  FF 75 20			PUSH	[EBP+32]					;SDWMIN
 00000116  FF 75 1C			PUSH	[EBP+28]					;SDWMAX
 00000119  FF 75 18			PUSH	[EBP+24]					;address of prompt1
 0000011C  FF 75 14			PUSH	[EBP+20]					;userInputSize
 0000011F  FF 75 10			PUSH	[EBP+16]					;address of userInput
 00000122  FF 75 0C			PUSH	[EBP+12]					;address of signedNum
 00000125  FF 75 08			PUSH	[EBP+8]						;address of isValid
 00000128  E8 0000001B			CALL	readVal

					; If Valid, Store Input in Array and Increment Counter
 0000012D  8B 75 08			MOV		ESI, [EBP+8]				;isValid
 00000130  80 3E 01			CMP		BYTE PTR [ESI], 1				
 00000133  C6 06 00			MOV		BYTE PTR [ESI], 0
 00000136  75 D5			JNE		_NextElement
 00000138  8B 75 0C			MOV		ESI, [EBP+12]				;signedNum
 0000013B  A5				MOVSD	
 0000013C  E2 CF			LOOP	_NextElement

					; Restore Registers and Return
 0000013E  5E				POP		ESI
 0000013F  5F				POP		EDI
 00000140  5A				POP		EDX
 00000141  59				POP		ECX
 00000142  5B				POP		EBX
 00000143  58				POP		EAX
 00000144  5D				POP		EBP
 00000145  C2 002C			RET		44

 00000148			getUserInputs ENDP

				; ---------------------------------------------------------------------------------
				; Name: readVal
				;
				; Converts string entered by user to signed number and validates if it is within
				; range for SDWORD.
				;
				; Preconditions: Parameters pushed on to stack in order listed below under Receives.
				;			Requires mGetString MACRO and mDisplayString  MACRO.
				;		
				;
				; Postconditions: Uses registers but restores them (EBP, EAX, EBX, ECX, EDX, 
				;			EDI, ESI). 
				;
				; Receives:
				;		Stack Parameters: 
				;			error (by reference) = address of error message
				;			inputLen (by reference) = address for number of characters inputted
				;			SDWMIN = lowest signed 32 bit integer value
				;			SDWMAX = greatest signed 32 bit integer value
				;			prompt1	(by reference) = address of prompt for user to enter number
				;			userInputSize = buffer size for input
				;			userInput (by reference) = address for string user inputs
				;			signedNum (by reference) = address to store outputted SDWORD
				;			isValid (by reference) = address to store if number is written or not
				;
				; Returns: 
				;		isValid = 1 if it is valid and was written 0 if not
				;		signedNum (by reference) = address to store outputed SDWORD
				;		
				; ---------------------------------------------------------------------------------
 00000148			readVal PROC

					; Preserve Registers
					LOCAL	hasSign:BYTE, isNeg:BYTE, isPos:BYTE, oFlag
 00000148  55		   *	    push   ebp
 00000149  8B EC	   *	    mov    ebp, esp
 0000014B  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000014E  50				PUSH	EAX
 0000014F  53				PUSH	EBX
 00000150  51				PUSH	ECX
 00000151  52				PUSH	EDX
 00000152  57				PUSH	EDI
 00000153  56				PUSH	ESI

					; Set Registers and Local Variables
 00000154  8B 75 10			MOV		ESI, [EBP+16]					;userInput
 00000157  C6 45 FF 00			MOV		hasSign, 0
 0000015B  C6 45 FE 00			MOV		isNeg, 0
 0000015F  C6 45 FD 00			MOV		isPos, 0
 00000163  C7 45 F8			MOV		oFlag, 0
	   00000000

					; Get Input from User  params: (prompt1, userInputSize, userInput, inputLen)
					mGetString	[EBP+24], [EBP+20], [EBP+16], [EBP+36] 									
 0000016A  52		     1		PUSH	EDX
 0000016B  51		     1		PUSH	ECX
 0000016C  50		     1		PUSH	EAX
 0000016D  57		     1		PUSH	EDI
 0000016E  52		     2		PUSH	EDX
 0000016F  8B 55 18	     2		MOV		EDX, [EBP+24]
 00000172  E8 00000000 E     2		CALL	WriteString
 00000177  5A		     2		POP		EDX
 00000178  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000017B  8B 4D 14	     1		MOV		ECX, [EBP+20]
 0000017E  E8 00000000 E     1		CALL	ReadString
 00000183  8B 7D 24	     1		MOV		EDI, [EBP+36]
 00000186  89 07	     1		MOV		[EDI], EAX
 00000188  5F		     1		POP		EDI
 00000189  58		     1		POP		EAX
 0000018A  59		     1		POP		ECX
 0000018B  5A		     1		POP		EDX
					
					;---------------------------------------
					; Checks for No Input
					;---------------------------------------
					; If User Didn't Input Anything, Display Error Message and Return
 0000018C  80 3E 00			CMP		BYTE PTR [ESI], 0
 0000018F  0F 84 00000091		JE		_PrintError

					;---------------------------------------
					; Checks Length of Input
					;---------------------------------------
					; Set Registers
 00000195  8B 7D 24			MOV		EDI, [EBP+36]				;inputLen
 00000198  8B 0F			MOV		ECX, [EDI]
 0000019A  33 C0			XOR		EAX, EAX

					; If More than 11 Characters Entered, Display Error Message and Return
 0000019C  83 F9 0B			CMP		ECX, 11
 0000019F  0F 8F 00000081		JG		_PrintError

					;---------------------------------------
					; Checks If First Character is a Sign
					;---------------------------------------
 000001A5  FC				CLD

					; If First Character is a +, Move to Next Char, DEC Count, Go to Loop
 000001A6  80 3E 2B			CMP		BYTE PTR [ESI], '+'
 000001A9  74 11			JE		_PlusSign

					; If First Character is a -, Move to Next Char, DEC Count, Go to Loop 
 000001AB  80 3E 2D			CMP		BYTE PTR [ESI], '-'
 000001AE  75 16			JNE		_IsDigitLoop
 000001B0  46				INC		ESI
 000001B1  49				DEC		ECX
 000001B2  C6 45 FF 01			MOV		hasSign, 1
 000001B6  C6 45 FE 01			MOV		isNeg, 1
 000001BA  EB 0A			JMP		_IsDigitLoop

 000001BC			_PlusSign:
 000001BC  46				INC		ESI
 000001BD  49				DEC		ECX
 000001BE  C6 45 FF 01			MOV		hasSign, 1
 000001C2  C6 45 FD 01			MOV		isPos, 1

					;---------------------------------------
					; Checks Characters are Digits
					;---------------------------------------'
 000001C6			_IsDigitLoop:
 000001C6  AC				LODSB

					; If Character Code is less than Zero's, Print Error
 000001C7  3C 30			CMP		AL, '0'
 000001C9  72 5B			JB		_PrintError

					; If it is Greater than 9's, Print Error
 000001CB  3C 39			CMP		AL, '9'
 000001CD  77 57			JA		_PrintError

 000001CF  E2 F5			LOOP	_IsDigitLoop
					
					;---------------------------------------
					; Converts to SDWORD and Checks for Valid SDWORD Range
					;---------------------------------------
					; Reset Registers
 000001D1  8B 75 10			MOV		ESI, [EBP+16]					;userInput
 000001D4  8B 0F			MOV		ECX, [EDI]						;inputLen
 000001D6  33 DB			XOR		EBX, EBX
 000001D8  33 D2			XOR		EDX, EDX
 000001DA  FC				CLD

					; If Signed, Start at Second Character
 000001DB  80 7D FF 01			CMP		hasSign, 1
 000001DF  75 02			JNE		_Convert
 000001E1  46				INC		ESI
 000001E2  49				DEC		ECX

				COMMENT !
				;___ FPU for this???
					FINIT
				_Convert:
					; Convert from ASCII to Signed Digit. 
					; result = 10*result+(n-48) = 10 result * n 48 - +
					XOR		EAX, EAX
					LODSB
					FILD	EAX
					FILD	EBX
					FMUL


					LOOP	_Convert
				!

 000001E3			_Convert:
					; Convert from ASCII to Signed Digit. result = 10*result+(n-48)
 000001E3  33 C0			XOR		EAX, EAX
 000001E5  AC				LODSB
 000001E6  83 E8 30			SUB		EAX, 48
 000001E9  8B D8			MOV		EBX, EAX
 000001EB  B8 0000000A			MOV		EAX, 10
 000001F0  F7 EA			IMUL	EDX

					;If Overflow, Display Error message
 000001F2  70 32			JO		_PrintError
 000001F4  03 C3			ADD		EAX, EBX

					;If Overflow Flag
 000001F6  71 07			JNO		_Continue
 000001F8  C7 45 F8			MOV		oFlag, 1
	   00000001
 000001FF			_Continue:
 000001FF  8B D0			MOV		EDX, EAX
 00000201  E2 E0			LOOP	_Convert
					
					; If Negative, Invert
 00000203  80 7D FE 01			CMP		isNeg, 1
 00000207  75 07			JNE		_CheckRange
 00000209  F7 D8			NEG		EAX

					; If Minimum Value, Store and Return
 0000020B  3B 45 20			CMP		EAX, [EBP+32]				;SDMIN
 0000020E  74 06			JE		_StoreResult

 00000210			_CheckRange:
					; If Overflow, Display Error message
 00000210  83 7D F8 01			CMP		oFlag, 1
 00000214  74 10			JE		_PrintError

					;---------------------------------------
					; Stores Result or Prints Error and Returns
					;---------------------------------------
 00000216			_StoreResult:
					; Store Result
 00000216  8B 7D 0C			MOV		EDI, [EBP+12]					;signedNum
 00000219  89 07			MOV		[EDI], EAX						;signedNum
 0000021B  8B 7D 08			MOV		EDI, [EBP+8]					;isValid
 0000021E  C7 07 00000001		MOV		DWORD PTR [EDI], 1				;isValid
 00000224  EB 0A			JMP		_Return

 00000226			_PrintError:
					; Print Error
					mDisplayString	[EBP+40]				;error
 00000226  52		     1		PUSH	EDX
 00000227  8B 55 28	     1		MOV		EDX, [EBP+40]
 0000022A  E8 00000000 E     1		CALL	WriteString
 0000022F  5A		     1		POP		EDX

 00000230			_Return:
				; Restore Registers and Return
 00000230  5E				POP		ESI
 00000231  5F				POP		EDI
 00000232  5A				POP		EDX
 00000233  59				POP		ECX
 00000234  5B				POP		EBX
 00000235  58				POP		EAX
 00000236  C9		   *	    leave  
 00000237  C2 0024			RET		36

 0000023A			readVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: writeVal
				;
				; Converts signed DWORD to string in reverse order.  Reverses string to correct 
				; order. Then displays the correct value. Sign is added for negative numbers.
				;
				; Preconditions: Parameters pushed on to stack in order listed below under Receives.
				;			Requires mdisplayString MACRO.
				;		
				;
				; Postconditions: Uses registers but restores them (EBP, EAX, EBX, EDX, EDI, ESI). 
				;			Changes processedStr, tempStr. Displays string of DWORD value.
				;
				; Receives:
				;		Stack Parameters: 
				;			SDWMAX = maximum 32 bit signed integer
				;			SDWMIN = minimum 32 bit signed integer
				;			tempStr (by reference) = used to process value
				;			pStringLen = length of processedStr
				;			processedStr (by reference) = address to store string output
				;			a DWORD value = value to be converted and printed
				;
				; Returns:
				;		Displays converted number using mDisplayString MACRO.
				;		
				; ---------------------------------------------------------------------------------
 0000023A			writeVal PROC
					; Preserve Registers
					LOCAL	count:DWORD, isNeg:BYTE
 0000023A  55		   *	    push   ebp
 0000023B  8B EC	   *	    mov    ebp, esp
 0000023D  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000240  50				PUSH	EAX
 00000241  53				PUSH	EBX
 00000242  52				PUSH	EDX
 00000243  57				PUSH	EDI
 00000244  56				PUSH	ESI

 00000245  C6 45 FB 00			MOV		isNeg, 0

					; If Min Signed DWORD Value, Set Absolute Value
 00000249  8B 55 08			MOV		EDX, [EBP+8]					;DWORD
 0000024C  3B 55 18			CMP		EDX, [EBP+24]					;SDWMIN
 0000024F  75 03			JNE		_CheckNegative
 00000251  8B 55 1C			MOV		EDX, [EBP+28]					;SDWMAX

 00000254			_CheckNegative:
					; If Negative Get Absolute Value
 00000254  83 FA 00			CMP		EDX, 0	
 00000257  7D 06			JGE		_SetRegs
 00000259  F7 DA			NEG		EDX
 0000025B  C6 45 FB 01			MOV		isNeg, 1

 0000025F			_SetRegs:
					; Set Registers
 0000025F  8B C2			MOV		EAX, EDX						;DWORD to convert
 00000261  8B 7D 14			MOV		EDI, [EBP+20]					;address of tempStr
 00000264  8B 4D 10			MOV		ECX, [EBP+16]					;pStringLen
 00000267  BB 0000000A			MOV		EBX, 10
 0000026C  C7 45 FC			MOV		count, 0						
	   00000000
 00000273  FC				CLD

 00000274			_NextDigit:
					; Calculate ASCII Code for Digit
 00000274  99			 	CDQ
 00000275  F7 FB			IDIV	EBX
 00000277  50				PUSH	EAX
 00000278  83 C2 30			ADD		EDX, 48

					; Store in String
 0000027B  8B C2			MOV		EAX, EDX
 0000027D  AA				STOSB	
 0000027E  FF 45 FC			INC		count
 00000281  58				POP		EAX

					; If Quotient is Not 0, Continue
 00000282  83 F8 00			CMP		EAX, 0
 00000285  75 ED			JNE		_NextDigit

					; If Negative, Add Sign
 00000287  80 7D FB 01			CMP		isNeg, 1								
 0000028B  75 13			JNE		_Reverse
 0000028D  B0 2D			MOV		AL, '-'
 0000028F  FF 45 FC			INC		count
 00000292  AA				STOSB

					; If Minimum SDWORD, Increment Last digit (First in tempStr)
 00000293  8B 55 08			MOV		EDX, [EBP+8]					;DWORD
 00000296  3B 55 18			CMP		EDX, [EBP+24]					;SDWMIN
 00000299  75 05			JNE		_Reverse
 0000029B  8B 7D 14			MOV		EDI, [EBP+20]
 0000029E  FE 07			INC		BYTE PTR [EDI] 					;SDWMAX
					
 000002A0			_Reverse:
					; Set Registers for Reversal
 000002A0  8B 7D 0C			MOV		EDI, [EBP+12]						;address of processedStr
 000002A3  8B 75 14			MOV		ESI, [EBP+20]						;address of tempStr
 000002A6  03 75 FC			ADD		ESI, count		
 000002A9  4E				DEC		ESI									;last element
 000002AA  8B 4D FC			MOV		ECX, count
					
					; Reverse String from Source to Destination
 000002AD			_NextElement:
 000002AD  FD				STD
 000002AE  AC				LODSB
 000002AF  FC				CLD
 000002B0  AA				STOSB
 000002B1  E2 FA			LOOP	_NextElement

					; Display String
					mDisplayString		[EBP+12]				;address of tempStr processedStr
 000002B3  52		     1		PUSH	EDX
 000002B4  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000002B7  E8 00000000 E     1		CALL	WriteString
 000002BC  5A		     1		POP		EDX

					; Clear Arrays
 000002BD  8B 4D 10			MOV		ECX, [EBP+16]						;pStringL
 000002C0  8B 7D 0C			MOV		EDI, [EBP+12]						;address of processedStr
 000002C3  B8 00000000			MOV		EAX, 0
 000002C8  F3/ AA			REP		STOSB
 000002CA  8B 7D 14			MOV		EDI, [EBP+20]						;address of tempStr
 000002CD  F3/ AA			REP		STOSB

					; Restore Registers and Return
 000002CF  5E				POP		ESI
 000002D0  5F				POP		EDI
 000002D1  5A				POP		EDX
 000002D2  5B				POP		EBX
 000002D3  58				POP		EAX
 000002D4  C9		   *	    leave  
 000002D5  C2 0018			RET		24
 000002D8			writeVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: displayList
				;
				; Prints a DWORD array to the console with one space between elements.
				;
				; Preconditions: 5 parameters pushed to the stack in the order listed below in 
				;				Receives section.
				;		
				;
				; Postconditions: Uses EAX, EBX, ECX, EDX, EBP, ESI but preserves and restores 
				;				all of them.
				;
				; Receives:
				;		Stack Parameters: 
				;				elemPerLine = number of elements to be displayed per line
				;				typeSize = size of the type
				;				ARRAYLEN = number of elements in array
				;				listTitle (by reference) = string title to be displayed before array
				;				outputList (by reference) = array to be displayed
				;
				; Returns: 
				;		None. Displays array.
				; ---------------------------------------------------------------------------------
 000002D8			displayList PROC
					; Preserve Registers
 000002D8  55				PUSH	EBP
 000002D9  8B EC			MOV		EBP, ESP
 000002DB  52				PUSH	EDX
 000002DC  51				PUSH	ECX
 000002DD  53				PUSH	EBX
 000002DE  50				PUSH	EAX
 000002DF  56				PUSH	ESI

 000002E0  8B 75 08			MOV		ESI, [EBP+8]					; address of array
					
					mDisplayString [EBP+12]					; address of title
 000002E3  52		     1		PUSH	EDX
 000002E4  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000002E7  E8 00000000 E     1		CALL	WriteString
 000002EC  5A		     1		POP		EDX

 000002ED  8B 4D 10			MOV		ECX, [EBP+16]					; length of array
					
					; Display Array
 000002F0			_Display:
 000002F0  8B 06			MOV		EAX, [ESI]
 000002F2  E8 00000000 E		CALL	WriteDec
 000002F7  B0 20			MOV		AL, ' '
 000002F9  E8 00000000 E		CALL	WriteChar
 000002FE  03 75 14			ADD		ESI, [EBP+20]					; element type size
					
					; If not nth number skip to the end, else go to next line 
					; (nth element = Length of array-count+1/n = remainder 0)
 00000301  8B 45 10			MOV		EAX, [EBP+16]					; length of array
 00000304  2B C1			SUB		EAX, ECX
 00000306  83 C0 01			ADD		EAX, 1
 00000309  8B 5D 18			MOV		EBX, [EBP+24]					; number of elements per line
 0000030C  99				CDQ
 0000030D  F7 F3			DIV		EBX
 0000030F  83 FA 00			CMP		EDX, 0
 00000312  75 05			JNE		_SkipNewLine
 00000314  E8 00000000 E		CALL	CrLf

 00000319			_SkipNewLine:
 00000319  E2 D5			LOOP	_Display

 0000031B  E8 00000000 E		CALL	CrLf

					;Restore Registers and Return
 00000320  5E				POP		ESI
 00000321  58				POP		EAX
 00000322  5B				POP		EBX
 00000323  59				POP		ECX
 00000324  5A				POP		EDX
 00000325  5D				POP		EBP
 00000326  C2 0014			RET		20
 00000329			displayList	ENDP

				; ---------------------------------------------------------------------------------
				; Name: average
				;
				; Calculates average of an array passed rounded down to the nearest integer.
				;
				; Preconditions: Parameters pushed on to stack in order listed below under Receives.
				;			Requires and calcSum PROC.
				;		
				;
				; Postconditions: Uses registers but restores them (). 
				;
				; Receives:
				;		Stack Parameters: 
				;				average (by reference) = address of average
				;				sum (by reference) = address of sum
				;				outputList (by reference) = address of outputList
				;				ARRAYLEN = number of elements in array
				;
				; Returns: None.  Displays converted number using mDisplayString MACRO.
				;		
				; ---------------------------------------------------------------------------------
 00000329			calcAverage PROC
					; Preserve Registers
 00000329  55				PUSH	EBP
 0000032A  8B EC			MOV		EBP, ESP
 0000032C  50				PUSH	EAX
 0000032D  53				PUSH	EBX
 0000032E  57				PUSH	EDI
 0000032F  56				PUSH	ESI

					; Calculate Sum
 00000330  FF 75 10			PUSH	[EBP+16]						;address of sum 
 00000333  FF 75 0C			PUSH	[EBP+12]						;address of outputList
 00000336  FF 75 08			PUSH	[EBP+8]							;ARRAYLEN (elements in array)
 00000339  E8 00000018			CALL	calcSum

					; Set EDI and ESI 
 0000033E  8B 75 10			MOV		ESI, [EBP+16]					;address of sum 
 00000341  8B 7D 14			MOV		EDI, [EBP+20]					;address of average

					; Divide Number of Elements
 00000344  99				CDQ		
 00000345  8B 06			MOV		EAX, [ESI]						;sum 
 00000347  8B 5D 08			MOV		EBX, [EBP+8]					;ARRAYLEN (elements in array)
 0000034A  F7 FB			IDIV	EBX
 0000034C  89 07			MOV		[EDI], EAX						;address of average 
					
					; Restore Registers and Return
 0000034E  5E				POP		ESI
 0000034F  5F				POP		EDI
 00000350  5B				POP		EBX
 00000351  58				POP		EAX
 00000352  5D				POP		EBP
 00000353  C2 0010			RET		16
 00000356			calcAverage ENDP

				; ---------------------------------------------------------------------------------
				; Name: calcSum
				;
				; Calculates the sum of integers in a DWORD array passed.
				;
				; Preconditions: Parameters pushed on to stack in order listed below under Receives.
				;			
				;		
				;
				; Postconditions: Uses registers but restores them (EBP, EAX, EBX, ECX, EDI, ESI). 
				;
				; Receives:
				;		Stack Parameters: 
				;				sum (by reference) = address of sum
				;				outputList (by reference) = address of outputList
				;				ARRAYLEN = number of elements in array
				;
				; Returns: None.  Displays converted number using mDisplayString MACRO.
				;		
				; ---------------------------------------------------------------------------------
 00000356			calcSum PROC
					; Preserve Registers
 00000356  55				PUSH	EBP
 00000357  8B EC			MOV		EBP, ESP
 00000359  50				PUSH	EAX
 0000035A  53				PUSH	EBX
 0000035B  51				PUSH	ECX
 0000035C  57				PUSH	EDI
 0000035D  56				PUSH	ESI


					; Set Registers to Traverse Array
 0000035E  33 DB			XOR		EBX, EBX
 00000360  8B 4D 08			MOV		ECX, [EBP+8]					;ARRAYLEN (elements in array)
 00000363  8B 75 0C			MOV		ESI, [EBP+12]					;address of outputLlist
 00000366  8B 7D 10			MOV		EDI, [EBP+16]					;address of sum

 00000369			_NextElement:
					; Add Elements in outputList
 00000369  AD				LODSD
 0000036A  03 D8			ADD		EBX, EAX
 0000036C  E2 FB			LOOP	_NextElement
					
					; Store in sum
 0000036E  89 1F			MOV		[EDI], EBX								

					; Restore registers and Return
 00000370  5E				POP		ESI
 00000371  5F				POP		EDI
 00000372  59				POP		ECX
 00000373  5B				POP		EBX
 00000374  58				POP		EAX
 00000375  5D				POP		EBP
 00000376  C2 000C			RET		12
 00000379			calcSum ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayFarewell
				;
				; Displays farewell message
				;
				; Preconditions: farewell  is pushed onto stack. Requires printString MACRO.
				;		
				;
				; Postconditions: Uses EBP but preserves and restores it. Displays Farewell.
				;
				; Receives:
				;		Stack Parameters: 
				;				farewellMess (by reference) = farewell message
				;
				; Returns: None. Displays farewell.
				;		
				; ---------------------------------------------------------------------------------
 00000379			displayFarewell PROC
					; Set Base Pointer
 00000379  55				PUSH	EBP
 0000037A  8B EC			MOV		EBP, ESP

					mDisplayString [EBP+8]							;address of farewell
 0000037C  52		     1		PUSH	EDX
 0000037D  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000380  E8 00000000 E     1		CALL	WriteString
 00000385  5A		     1		POP		EDX

					; Restore Base Pointer
 00000386  5D				POP		EBP
 00000387  C2 0004			RET		4

 0000038A			displayFarewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/02/20 11:37:04
&Project Template        (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000019A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000038A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcAverage  . . . . . . . . . .	P Near	 00000329 _TEXT	Length= 0000002D Public STDCALL
calcSum  . . . . . . . . . . . .	P Near	 00000356 _TEXT	Length= 00000023 Public STDCALL
  _NextElement . . . . . . . . .	L Near	 00000369 _TEXT	
displayFarewell  . . . . . . . .	P Near	 00000379 _TEXT	Length= 00000011 Public STDCALL
displayList  . . . . . . . . . .	P Near	 000002D8 _TEXT	Length= 00000051 Public STDCALL
  _Display . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  _SkipNewLine . . . . . . . . .	L Near	 00000319 _TEXT	
getUserInputs  . . . . . . . . .	P Near	 000000FE _TEXT	Length= 0000004A Public STDCALL
  _NextElement . . . . . . . . .	L Near	 0000010D _TEXT	
introduction . . . . . . . . . .	P Near	 000000E3 _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E3 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 00000148 _TEXT	Length= 000000F2 Public STDCALL
  hasSign  . . . . . . . . . . .	Byte	 bp - 00000001
  isNeg  . . . . . . . . . . . .	Byte	 bp - 00000002
  isPos  . . . . . . . . . . . .	Byte	 bp - 00000003
  oFlag  . . . . . . . . . . . .	DWord	 bp - 00000008
  _PlusSign  . . . . . . . . . .	L Near	 000001BC _TEXT	
  _IsDigitLoop . . . . . . . . .	L Near	 000001C6 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 000001E3 _TEXT	
  _Continue  . . . . . . . . . .	L Near	 000001FF _TEXT	
  _CheckRange  . . . . . . . . .	L Near	 00000210 _TEXT	
  _StoreResult . . . . . . . . .	L Near	 00000216 _TEXT	
  _PrintError  . . . . . . . . .	L Near	 00000226 _TEXT	
  _Return  . . . . . . . . . . .	L Near	 00000230 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 0000023A _TEXT	Length= 0000009E Public STDCALL
  count  . . . . . . . . . . . .	DWord	 bp - 00000004
  isNeg  . . . . . . . . . . . .	Byte	 bp - 00000005
  _CheckNegative . . . . . . . .	L Near	 00000254 _TEXT	
  _SetRegs . . . . . . . . . . .	L Near	 0000025F _TEXT	
  _NextDigit . . . . . . . . . .	L Near	 00000274 _TEXT	
  _Reverse . . . . . . . . . . .	L Near	 000002A0 _TEXT	
  _NextElement . . . . . . . . .	L Near	 000002AD _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYLEN . . . . . . . . . . . .	Number	 0000000Ah   
BUFFERSIZE . . . . . . . . . . .	Number	 0000000Dh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SDWMAX . . . . . . . . . . . . .	Number	 7FFFFFFFh   
SDWMIN . . . . . . . . . . . . .	Number	 -80000000h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 0000018E _DATA	
avgTitle . . . . . . . . . . . .	Byte	 000000E2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elemPerLine  . . . . . . . . . .	DWord	 00000186 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000051 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 0000010E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputLen . . . . . . . . . . . .	DWord	 00000182 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000001C _DATA	
isValid  . . . . . . . . . . . .	DWord	 00000192 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listTitle  . . . . . . . . . . .	Byte	 000000CB _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputList . . . . . . . . . . .	DWord	 00000156 _DATA	
pStringLen . . . . . . . . . . .	DWord	 00000141 _DATA	
processedStr . . . . . . . . . .	Byte	 00000135 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000085 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
signedNum  . . . . . . . . . . .	DWord	 00000196 _DATA	
sumTitle . . . . . . . . . . . .	Byte	 000000DC _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000018A _DATA	
tempStr  . . . . . . . . . . . .	Byte	 00000129 _DATA	
typeSize . . . . . . . . . . . .	DWord	 0000017E _DATA	
userInputSize  . . . . . . . . .	DWord	 00000152 _DATA	
userInput  . . . . . . . . . . .	Byte	 00000145 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
